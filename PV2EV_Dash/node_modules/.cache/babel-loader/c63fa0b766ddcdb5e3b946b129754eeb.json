{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\src\\\\pages\\\\dashboards\\\\Ecommerce\\\\Map.js\";\nimport React, { Component } from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from 'google-map-react';\nimport Geocode from \"react-geocode\";\nimport Autocomplete from 'react-google-autocomplete';\nimport { GoogleMapsAPI } from './client-config';\nGeocode.setApiKey(GoogleMapsAPI);\nGeocode.enableDebug();\n\nvar Map = /*#__PURE__*/function (_Component) {\n  _inherits(Map, _Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _super.call(this, props);\n\n    _this.getCity = function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    };\n\n    _this.getArea = function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    };\n\n    _this.getState = function (addressArray) {\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    };\n\n    _this.onChange = function (event) {\n      _this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    _this.onInfoWindowClose = function (event) {};\n\n    _this.onMarkerDragEnd = function (event) {\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng();\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          markerPosition: {\n            lat: newLat,\n            lng: newLng\n          },\n          mapPosition: {\n            lat: newLat,\n            lng: newLng\n          }\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    };\n\n    _this.onPlaceSelected = function (place) {\n      console.log('plc', place);\n\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    };\n\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      }\n    };\n    return _this;\n  }\n  /**\r\n   * Get the current address from the default map position and set those values in the state\r\n   */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray);\n\n        console.log('city', city, area, state);\n\n        _this2.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\r\n     * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n     *\r\n     * @param nextProps\r\n     * @param nextState\r\n     * @return {boolean}\r\n     */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      }\n    }\n    /**\r\n     * Get the city and set the city input value to the one selected\r\n     *\r\n     * @param addressArray\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return /*#__PURE__*/React.createElement(GoogleMap, {\n          google: _this3.props.google,\n          defaultZoom: _this3.props.zoom,\n          defaultCenter: {\n            lat: _this3.state.mapPosition.lat,\n            lng: _this3.state.mapPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(InfoWindow, {\n          onClose: _this3.onInfoWindowClose,\n          position: {\n            lat: _this3.state.markerPosition.lat + 0.0018,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 8\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            padding: 0,\n            margin: 0\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 9\n          }\n        }, _this3.state.address))), /*#__PURE__*/React.createElement(Marker, {\n          google: _this3.props.google,\n          name: 'Dolores park',\n          draggable: true,\n          onDragEnd: _this3.onMarkerDragEnd,\n          position: {\n            lat: _this3.state.markerPosition.lat,\n            lng: _this3.state.markerPosition.lng\n          },\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(Marker, {\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 7\n          }\n        }), /*#__PURE__*/React.createElement(Autocomplete, {\n          style: {\n            width: '100%',\n            height: '40px',\n            paddingLeft: '16px',\n            marginTop: '2px',\n            marginBottom: '500px'\n          },\n          onPlaceSelected: _this3.onPlaceSelected,\n          types: ['(regions)'],\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 7\n          }\n        }));\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 10\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 5\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 7\n          }\n        }, \"City\"), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          name: \"city\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.city,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 7\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 7\n          }\n        }, \"Area\"), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          name: \"area\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.area,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 7\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 7\n          }\n        }, \"State\"), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          name: \"state\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 7\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"form-group\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 7\n          }\n        }, \"Address\"), /*#__PURE__*/React.createElement(\"input\", {\n          type: \"text\",\n          name: \"address\",\n          className: \"form-control\",\n          onChange: this.onChange,\n          readOnly: \"readOnly\",\n          value: this.state.address,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 7\n          }\n        }))), /*#__PURE__*/React.createElement(AsyncMap, {\n          googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=\".concat(GoogleMapsAPI, \"&libraries=places\"),\n          loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 7\n            }\n          }),\n          containerElement: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              height: this.props.height\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 7\n            }\n          }),\n          mapElement: /*#__PURE__*/React.createElement(\"div\", {\n            style: {\n              height: \"100%\"\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 7\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 5\n          }\n        }));\n      } else {\n        map = /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: this.props.height\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 10\n          }\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(Component);\n\nexport default Map;","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/pages/dashboards/Ecommerce/Map.js"],"names":["React","Component","withGoogleMap","GoogleMap","withScriptjs","InfoWindow","Marker","Geocode","Autocomplete","GoogleMapsAPI","setApiKey","enableDebug","Map","props","getCity","addressArray","city","i","length","types","long_name","getArea","area","j","getState","state","onChange","event","setState","target","name","value","onInfoWindowClose","onMarkerDragEnd","newLat","latLng","lat","newLng","lng","fromLatLng","then","response","address","results","formatted_address","address_components","markerPosition","mapPosition","error","console","onPlaceSelected","place","log","latValue","geometry","location","lngValue","center","nextProps","nextState","AsyncMap","google","zoom","padding","margin","width","height","paddingLeft","marginTop","marginBottom","map","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from 'google-map-react';\r\nimport Geocode from \"react-geocode\";\r\nimport Autocomplete from 'react-google-autocomplete';\r\nimport { GoogleMapsAPI } from './client-config';\r\nGeocode.setApiKey( GoogleMapsAPI );\r\nGeocode.enableDebug();\r\n\r\nclass Map extends Component{\r\n\r\n\tconstructor( props ){\r\n\t\tsuper( props );\r\n\t\tthis.state = {\r\n\t\t\taddress: '',\r\n\t\t\tcity: '',\r\n\t\t\tarea: '',\r\n\t\t\tstate: '',\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t},\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: this.props.center.lat,\r\n\t\t\t\tlng: this.props.center.lng\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Get the current address from the default map position and set those values in the state\r\n\t */\r\n\tcomponentDidMount() {\r\n\t\tGeocode.fromLatLng( this.state.mapPosition.lat , this.state.mapPosition.lng ).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t      addressArray =  response.results[0].address_components,\r\n\t\t\t\t      city = this.getCity( addressArray ),\r\n\t\t\t\t      area = this.getArea( addressArray ),\r\n\t\t\t\t      state = this.getState( addressArray );\r\n\r\n\t\t\t\tconsole.log( 'city', city, area, state );\r\n\r\n\t\t\t\tthis.setState( {\r\n\t\t\t\t\taddress: ( address ) ? address : '',\r\n\t\t\t\t\tarea: ( area ) ? area : '',\r\n\t\t\t\t\tcity: ( city ) ? city : '',\r\n\t\t\t\t\tstate: ( state ) ? state : '',\r\n\t\t\t\t} )\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error( error );\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\t/**\r\n\t * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n\t *\r\n\t * @param nextProps\r\n\t * @param nextState\r\n\t * @return {boolean}\r\n\t */\r\n\tshouldComponentUpdate( nextProps, nextState ){\r\n\t\tif (\r\n\t\t\tthis.state.markerPosition.lat !== this.props.center.lat ||\r\n\t\t\tthis.state.address !== nextState.address ||\r\n\t\t\tthis.state.city !== nextState.city ||\r\n\t\t\tthis.state.area !== nextState.area ||\r\n\t\t\tthis.state.state !== nextState.state\r\n\t\t) {\r\n\t\t\treturn true\r\n\t\t} else if ( this.props.center.lat === nextProps.center.lat ){\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Get the city and set the city input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetCity = ( addressArray ) => {\r\n\t\tlet city = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_2' === addressArray[ i ].types[0] ) {\r\n\t\t\t\tcity = addressArray[ i ].long_name;\r\n\t\t\t\treturn city;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the area and set the area input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetArea = ( addressArray ) => {\r\n\t\tlet area = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tif ( addressArray[ i ].types[0]  ) {\r\n\t\t\t\tfor ( let j = 0; j < addressArray[ i ].types.length; j++ ) {\r\n\t\t\t\t\tif ( 'sublocality_level_1' === addressArray[ i ].types[j] || 'locality' === addressArray[ i ].types[j] ) {\r\n\t\t\t\t\t\tarea = addressArray[ i ].long_name;\r\n\t\t\t\t\t\treturn area;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * Get the address and set the address input value to the one selected\r\n\t *\r\n\t * @param addressArray\r\n\t * @return {string}\r\n\t */\r\n\tgetState = ( addressArray ) => {\r\n\t\tlet state = '';\r\n\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\tfor( let i = 0; i < addressArray.length; i++ ) {\r\n\t\t\t\tif ( addressArray[ i ].types[0] && 'administrative_area_level_1' === addressArray[ i ].types[0] ) {\r\n\t\t\t\t\tstate = addressArray[ i ].long_name;\r\n\t\t\t\t\treturn state;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t/**\r\n\t * And function for city,state and address input\r\n\t * @param event\r\n\t */\r\n\tonChange = ( event ) => {\r\n\t\tthis.setState({ [event.target.name]: event.target.value });\r\n\t};\r\n\t/**\r\n\t * This Event triggers when the marker window is closed\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonInfoWindowClose = ( event ) => {\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * When the marker is dragged you get the lat and long using the functions available from event object.\r\n\t * Use geocode to get the address, city, area and state from the lat and lng positions.\r\n\t * And then set those values in the state.\r\n\t *\r\n\t * @param event\r\n\t */\r\n\tonMarkerDragEnd = ( event ) => {\r\n\t\tlet newLat = event.latLng.lat(),\r\n\t\t    newLng = event.latLng.lng();\r\n\r\n\t\tGeocode.fromLatLng( newLat , newLng ).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconst address = response.results[0].formatted_address,\r\n\t\t\t\t      addressArray =  response.results[0].address_components,\r\n\t\t\t\t      city = this.getCity( addressArray ),\r\n\t\t\t\t      area = this.getArea( addressArray ),\r\n\t\t\t\t      state = this.getState( addressArray );\r\n\t\t\t\tthis.setState( {\r\n\t\t\t\t\taddress: ( address ) ? address : '',\r\n\t\t\t\t\tarea: ( area ) ? area : '',\r\n\t\t\t\t\tcity: ( city ) ? city : '',\r\n\t\t\t\t\tstate: ( state ) ? state : '',\r\n\t\t\t\t\tmarkerPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmapPosition: {\r\n\t\t\t\t\t\tlat: newLat,\r\n\t\t\t\t\t\tlng: newLng\r\n\t\t\t\t\t},\r\n\t\t\t\t} )\r\n\t\t\t},\r\n\t\t\terror => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * When the user types an address in the search box\r\n\t * @param place\r\n\t */\r\n\tonPlaceSelected = ( place ) => {\r\n\t\tconsole.log( 'plc', place );\r\n\t\tconst address = place.formatted_address,\r\n\t\t      addressArray =  place.address_components,\r\n\t\t      city = this.getCity( addressArray ),\r\n\t\t      area = this.getArea( addressArray ),\r\n\t\t      state = this.getState( addressArray ),\r\n\t\t      latValue = place.geometry.location.lat(),\r\n\t\t      lngValue = place.geometry.location.lng();\r\n\t\t// Set these values in the state.\r\n\t\tthis.setState({\r\n\t\t\taddress: ( address ) ? address : '',\r\n\t\t\tarea: ( area ) ? area : '',\r\n\t\t\tcity: ( city ) ? city : '',\r\n\t\t\tstate: ( state ) ? state : '',\r\n\t\t\tmarkerPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t\tmapPosition: {\r\n\t\t\t\tlat: latValue,\r\n\t\t\t\tlng: lngValue\r\n\t\t\t},\r\n\t\t})\r\n\t};\r\n\r\n\r\n\trender(){\r\n\t\tconst AsyncMap = withScriptjs(\r\n\t\t\twithGoogleMap(\r\n\t\t\t\tprops => (\r\n\t\t\t\t\t<GoogleMap google={ this.props.google }\r\n\t\t\t\t\t           defaultZoom={ this.props.zoom }\r\n\t\t\t\t\t           defaultCenter={{ lat: this.state.mapPosition.lat, lng: this.state.mapPosition.lng }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{/* InfoWindow on top of marker */}\r\n\t\t\t\t\t\t<InfoWindow\r\n\t\t\t\t\t\t\tonClose={this.onInfoWindowClose}\r\n\t\t\t\t\t\t\tposition={{ lat: ( this.state.markerPosition.lat + 0.0018 ), lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<span style={{ padding: 0, margin: 0 }}>{ this.state.address }</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</InfoWindow>\r\n\t\t\t\t\t\t{/*Marker*/}\r\n\t\t\t\t\t\t<Marker google={this.props.google}\r\n\t\t\t\t\t\t        name={'Dolores park'}\r\n\t\t\t\t\t\t        draggable={true}\r\n\t\t\t\t\t\t        onDragEnd={ this.onMarkerDragEnd }\r\n\t\t\t\t\t\t        position={{ lat: this.state.markerPosition.lat, lng: this.state.markerPosition.lng }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Marker />\r\n\t\t\t\t\t\t{/* For Auto complete Search Box */}\r\n\t\t\t\t\t\t<Autocomplete\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\theight: '40px',\r\n\t\t\t\t\t\t\t\tpaddingLeft: '16px',\r\n\t\t\t\t\t\t\t\tmarginTop: '2px',\r\n\t\t\t\t\t\t\t\tmarginBottom: '500px'\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonPlaceSelected={ this.onPlaceSelected }\r\n\t\t\t\t\t\t\ttypes={['(regions)']}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</GoogleMap>\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\tlet map;\r\n\t\tif( this.props.center.lat !== undefined ) {\r\n\t\t\tmap = <div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">City</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"city\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.city }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">Area</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"area\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.area }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">State</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"state\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.state }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"\">Address</label>\r\n\t\t\t\t\t\t<input type=\"text\" name=\"address\" className=\"form-control\" onChange={ this.onChange } readOnly=\"readOnly\" value={ this.state.address }/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<AsyncMap\r\n\t\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GoogleMapsAPI}&libraries=places`}\r\n\t\t\t\t\tloadingElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontainerElement={\r\n\t\t\t\t\t\t<div style={{ height: this.props.height }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmapElement={\r\n\t\t\t\t\t\t<div style={{ height: `100%` }} />\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t} else {\r\n\t\t\tmap = <div style={{height: this.props.height}} />\r\n\t\t}\r\n\t\treturn( map )\r\n\t}\r\n}\r\nexport default Map\r\n"]},"metadata":{},"sourceType":"module"}