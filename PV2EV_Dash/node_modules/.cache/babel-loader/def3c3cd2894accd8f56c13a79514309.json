{"ast":null,"code":"export function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User',\n    role: 'Admin'\n  }];\n  var realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.username === params.username && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: 'Admin',\n              token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return responseJson;\n              }\n            });\n          } else {\n            // else return error\n            reject('Username or password is incorrect');\n          }\n\n          return;\n        } // register\n\n\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params = JSON.parse(opts.body); // add new users\n\n\n          var _params$fullname$spli = _params.fullname.split(' '),\n              firstName = _params$fullname$spli.firstName,\n              lastName = _params$fullname$spli.lastName;\n\n          var newUser = {\n            id: users.length + 1,\n            username: firstName,\n            password: _params.password,\n            firstName: firstName,\n            lastName: lastName,\n            role: 'Admin'\n          };\n          users.push({\n            newUser\n          });\n          var _responseJson = {\n            id: newUser.id,\n            username: newUser.username,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            role: newUser.role,\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'\n          };\n          resolve({\n            ok: true,\n            json: function json() {\n              return _responseJson;\n            }\n          });\n          return;\n        } // forget password\n\n\n        if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params2 = JSON.parse(opts.body); // find if any user matches login credentials\n\n\n          var _filteredUsers = users.filter(function (user) {\n            return user.username === _params2.username;\n          });\n\n          if (_filteredUsers.length) {\n            var _responseJson2 = {\n              message: \"We've sent you a link to reset password to your registered email.\"\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return _responseJson2;\n              }\n            });\n          } else {\n            // else return error\n            reject('Sorry, we could not find any registered user with entered username');\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI') {\n            resolve({\n              ok: true,\n              json: function json() {\n                return users;\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/helpers/fake-backend.js"],"names":["configureFakeBackend","users","id","username","password","firstName","lastName","role","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","token","ok","json","fullname","split","newUser","push","message","headers","Authorization","then","response"],"mappings":"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","sourcesContent":["export function configureFakeBackend() {\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User', role: 'Admin' }];\n    let realFetch = window.fetch;\n    window.fetch = function(url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n                // authenticate\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            role: 'Admin',\n                            token:\n                                'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n                    return;\n                }\n\n                // register\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // add new users\n                    let { firstName, lastName } = params.fullname.split(' ');\n                    let newUser = {\n                        id: users.length + 1,\n                        username: firstName,\n                        password: params.password,\n                        firstName: firstName,\n                        lastName: lastName,\n                        role: 'Admin',\n                    };\n                    users.push({ newUser });\n\n                    let responseJson = {\n                        id: newUser.id,\n                        username: newUser.username,\n                        firstName: newUser.firstName,\n                        lastName: newUser.lastName,\n                        role: newUser.role,\n                        token:\n                            'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI',\n                    };\n                    resolve({ ok: true, json: () => responseJson });\n                    return;\n                }\n\n                // forget password\n                if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username;\n                    });\n\n                    if (filteredUsers.length) {\n                        let responseJson = {\n                            message: \"We've sent you a link to reset password to your registered email.\",\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Sorry, we could not find any registered user with entered username');\n                    }\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (\n                        opts.headers &&\n                        opts.headers.Authorization ===\n                            'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI'\n                    ) {\n                        resolve({ ok: true, json: () => users });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n            }, 500);\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}