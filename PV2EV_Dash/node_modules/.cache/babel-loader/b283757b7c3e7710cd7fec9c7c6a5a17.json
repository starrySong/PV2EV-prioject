{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\n\nvar Gantt = /*#__PURE__*/function () {\n  function Gantt(wrapper, tasks, options) {\n    _classCallCheck(this, Gantt);\n\n    this.setup_wrapper(wrapper);\n    this.setup_options(options);\n    this.setup_tasks(tasks); // initialize with default view mode\n\n    this.change_view_mode();\n    this.bind_events();\n  }\n\n  _createClass(Gantt, [{\n    key: \"setup_wrapper\",\n    value: function setup_wrapper(element) {\n      var svg_element, wrapper_element; // CSS Selector is passed\n\n      if (typeof element === 'string') {\n        element = document.querySelector(element);\n      } // get the SVGElement\n\n\n      if (element instanceof HTMLElement) {\n        wrapper_element = element;\n        svg_element = element.querySelector('svg');\n      } else if (element instanceof SVGElement) {\n        svg_element = element;\n      } else {\n        throw new TypeError('FrappÃ© Gantt only supports usage of a string CSS selector,' + \" HTML DOM element or SVG DOM element for the 'element' parameter\");\n      } // svg element\n\n\n      if (!svg_element) {\n        // create it\n        this.$svg = createSVG('svg', {\n          append_to: wrapper_element,\n          class: 'gantt'\n        });\n      } else {\n        this.$svg = svg_element;\n        this.$svg.classList.add('gantt');\n      } // wrapper element\n\n\n      this.$container = document.createElement('div');\n      this.$container.classList.add('gantt-container');\n      var parent_element = this.$svg.parentElement;\n      parent_element.appendChild(this.$container);\n      this.$container.appendChild(this.$svg); // popup wrapper\n\n      this.popup_wrapper = document.createElement('div');\n      this.popup_wrapper.classList.add('popup-wrapper');\n      this.$container.appendChild(this.popup_wrapper);\n    }\n  }, {\n    key: \"setup_options\",\n    value: function setup_options(options) {\n      var default_options = {\n        header_height: 50,\n        column_width: 30,\n        step: 24,\n        view_modes: ['Quarter Day', 'Half Day', 'Day', 'Week', 'Month', 'Year'],\n        bar_height: 20,\n        bar_corner_radius: 3,\n        arrow_curve: 5,\n        padding: 18,\n        view_mode: 'Day',\n        date_format: 'YYYY-MM-DD',\n        popup_trigger: 'click',\n        custom_popup_html: null,\n        language: 'en'\n      };\n      this.options = Object.assign({}, default_options, options);\n    }\n  }, {\n    key: \"setup_tasks\",\n    value: function setup_tasks(tasks) {\n      // prepare tasks\n      this.tasks = tasks.map(function (task, i) {\n        // convert to Date objects\n        task._start = date_utils.parse(task.start);\n        task._end = date_utils.parse(task.end); // make task invalid if duration too large\n\n        if (date_utils.diff(task._end, task._start, 'year') > 10) {\n          task.end = null;\n        } // cache index\n\n\n        task._index = i; // invalid dates\n\n        if (!task.start && !task.end) {\n          var today = date_utils.today();\n          task._start = today;\n          task._end = date_utils.add(today, 2, 'day');\n        }\n\n        if (!task.start && task.end) {\n          task._start = date_utils.add(task._end, -2, 'day');\n        }\n\n        if (task.start && !task.end) {\n          task._end = date_utils.add(task._start, 2, 'day');\n        } // if hours is not set, assume the last day is full day\n        // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n\n\n        var task_end_values = date_utils.get_date_values(task._end);\n\n        if (task_end_values.slice(3).every(function (d) {\n          return d === 0;\n        })) {\n          task._end = date_utils.add(task._end, 24, 'hour');\n        } // invalid flag\n\n\n        if (!task.start || !task.end) {\n          task.invalid = true;\n        } // dependencies\n\n\n        if (typeof task.dependencies === 'string' || !task.dependencies) {\n          var deps = [];\n\n          if (task.dependencies) {\n            deps = task.dependencies.split(',').map(function (d) {\n              return d.trim();\n            }).filter(function (d) {\n              return d;\n            });\n          }\n\n          task.dependencies = deps;\n        } // uids\n\n\n        if (!task.id) {\n          task.id = generate_id(task);\n        }\n\n        return task;\n      });\n      this.setup_dependencies();\n    }\n  }, {\n    key: \"setup_dependencies\",\n    value: function setup_dependencies() {\n      this.dependency_map = {};\n\n      var _iterator = _createForOfIteratorHelper(this.tasks),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var t = _step.value;\n\n          var _iterator2 = _createForOfIteratorHelper(t.dependencies),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var d = _step2.value;\n              this.dependency_map[d] = this.dependency_map[d] || [];\n              this.dependency_map[d].push(t.id);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh(tasks) {\n      this.setup_tasks(tasks);\n      this.change_view_mode();\n    }\n  }, {\n    key: \"change_view_mode\",\n    value: function change_view_mode() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.view_mode;\n      this.update_view_scale(mode);\n      this.setup_dates();\n      this.render(); // fire viewmode_change event\n\n      this.trigger_event('view_change', [mode]);\n    }\n  }, {\n    key: \"update_view_scale\",\n    value: function update_view_scale(view_mode) {\n      this.options.view_mode = view_mode;\n\n      if (view_mode === 'Day') {\n        this.options.step = 24;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Half Day') {\n        this.options.step = 24 / 2;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Quarter Day') {\n        this.options.step = 24 / 4;\n        this.options.column_width = 38;\n      } else if (view_mode === 'Week') {\n        this.options.step = 24 * 7;\n        this.options.column_width = 140;\n      } else if (view_mode === 'Month') {\n        this.options.step = 24 * 30;\n        this.options.column_width = 120;\n      } else if (view_mode === 'Year') {\n        this.options.step = 24 * 365;\n        this.options.column_width = 120;\n      }\n    }\n  }, {\n    key: \"setup_dates\",\n    value: function setup_dates() {\n      this.setup_gantt_dates();\n      this.setup_date_values();\n    }\n  }, {\n    key: \"setup_gantt_dates\",\n    value: function setup_gantt_dates() {\n      this.gantt_start = this.gantt_end = null;\n\n      var _iterator3 = _createForOfIteratorHelper(this.tasks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var task = _step3.value;\n\n          // set global start and end date\n          if (!this.gantt_start || task._start < this.gantt_start) {\n            this.gantt_start = task._start;\n          }\n\n          if (!this.gantt_end || task._end > this.gantt_end) {\n            this.gantt_end = task._end;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n      this.gantt_end = date_utils.start_of(this.gantt_end, 'day'); // add date padding on both sides\n\n      if (this.view_is(['Quarter Day', 'Half Day'])) {\n        this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n        this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n      } else if (this.view_is('Month')) {\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n        this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n      } else if (this.view_is('Year')) {\n        this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n        this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n      } else {\n        this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n        this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n      }\n    }\n  }, {\n    key: \"setup_date_values\",\n    value: function setup_date_values() {\n      this.dates = [];\n      var cur_date = null;\n\n      while (cur_date === null || cur_date < this.gantt_end) {\n        if (!cur_date) {\n          cur_date = date_utils.clone(this.gantt_start);\n        } else {\n          if (this.view_is('Year')) {\n            cur_date = date_utils.add(cur_date, 1, 'year');\n          } else if (this.view_is('Month')) {\n            cur_date = date_utils.add(cur_date, 1, 'month');\n          } else {\n            cur_date = date_utils.add(cur_date, this.options.step, 'hour');\n          }\n        }\n\n        this.dates.push(cur_date);\n      }\n    }\n  }, {\n    key: \"bind_events\",\n    value: function bind_events() {\n      this.bind_grid_click();\n      this.bind_bar_events();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.clear();\n      this.setup_layers();\n      this.make_grid();\n      this.make_dates();\n      this.make_bars();\n      this.make_arrows();\n      this.map_arrows_on_bars();\n      this.set_width();\n      this.set_scroll_position();\n    }\n  }, {\n    key: \"setup_layers\",\n    value: function setup_layers() {\n      this.layers = {};\n      var layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details']; // make group layers\n\n      for (var _i = 0, _layers = layers; _i < _layers.length; _i++) {\n        var layer = _layers[_i];\n        this.layers[layer] = createSVG('g', {\n          class: layer,\n          append_to: this.$svg\n        });\n      }\n    }\n  }, {\n    key: \"make_grid\",\n    value: function make_grid() {\n      this.make_grid_background();\n      this.make_grid_rows();\n      this.make_grid_header();\n      this.make_grid_ticks();\n      this.make_grid_highlights();\n    }\n  }, {\n    key: \"make_grid_background\",\n    value: function make_grid_background() {\n      var grid_width = this.dates.length * this.options.column_width;\n      var grid_height = this.options.header_height + this.options.padding + (this.options.bar_height + this.options.padding) * this.tasks.length;\n      createSVG('rect', {\n        x: 0,\n        y: 0,\n        width: grid_width,\n        height: grid_height,\n        class: 'grid-background',\n        append_to: this.layers.grid\n      });\n      $.attr(this.$svg, {\n        height: grid_height + this.options.padding + 100,\n        width: '100%'\n      });\n    }\n  }, {\n    key: \"make_grid_rows\",\n    value: function make_grid_rows() {\n      var rows_layer = createSVG('g', {\n        append_to: this.layers.grid\n      });\n      var lines_layer = createSVG('g', {\n        append_to: this.layers.grid\n      });\n      var row_width = this.dates.length * this.options.column_width;\n      var row_height = this.options.bar_height + this.options.padding;\n      var row_y = this.options.header_height + this.options.padding / 2;\n\n      var _iterator4 = _createForOfIteratorHelper(this.tasks),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var task = _step4.value;\n          createSVG('rect', {\n            x: 0,\n            y: row_y,\n            width: row_width,\n            height: row_height,\n            class: 'grid-row',\n            append_to: rows_layer\n          });\n          createSVG('line', {\n            x1: 0,\n            y1: row_y + row_height,\n            x2: row_width,\n            y2: row_y + row_height,\n            class: 'row-line',\n            append_to: lines_layer\n          });\n          row_y += this.options.bar_height + this.options.padding;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"make_grid_header\",\n    value: function make_grid_header() {\n      var header_width = this.dates.length * this.options.column_width;\n      var header_height = this.options.header_height + 10;\n      createSVG('rect', {\n        x: 0,\n        y: 0,\n        width: header_width,\n        height: header_height,\n        class: 'grid-header',\n        append_to: this.layers.grid\n      });\n    }\n  }, {\n    key: \"make_grid_ticks\",\n    value: function make_grid_ticks() {\n      var tick_x = 0;\n      var tick_y = this.options.header_height + this.options.padding / 2;\n      var tick_height = (this.options.bar_height + this.options.padding) * this.tasks.length;\n\n      var _iterator5 = _createForOfIteratorHelper(this.dates),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var date = _step5.value;\n          var tick_class = 'tick'; // thick tick for monday\n\n          if (this.view_is('Day') && date.getDate() === 1) {\n            tick_class += ' thick';\n          } // thick tick for first week\n\n\n          if (this.view_is('Week') && date.getDate() >= 1 && date.getDate() < 8) {\n            tick_class += ' thick';\n          } // thick ticks for quarters\n\n\n          if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\n            tick_class += ' thick';\n          }\n\n          createSVG('path', {\n            d: \"M \".concat(tick_x, \" \").concat(tick_y, \" v \").concat(tick_height),\n            class: tick_class,\n            append_to: this.layers.grid\n          });\n\n          if (this.view_is('Month')) {\n            tick_x += date_utils.get_days_in_month(date) * this.options.column_width / 30;\n          } else {\n            tick_x += this.options.column_width;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }, {\n    key: \"make_grid_highlights\",\n    value: function make_grid_highlights() {\n      // highlight today's date\n      if (this.view_is('Day')) {\n        var x = date_utils.diff(date_utils.today(), this.gantt_start, 'hour') / this.options.step * this.options.column_width;\n        var y = 0;\n        var width = this.options.column_width;\n        var height = (this.options.bar_height + this.options.padding) * this.tasks.length + this.options.header_height + this.options.padding / 2;\n        createSVG('rect', {\n          x,\n          y,\n          width,\n          height,\n          class: 'today-highlight',\n          append_to: this.layers.grid\n        });\n      }\n    }\n  }, {\n    key: \"make_dates\",\n    value: function make_dates() {\n      var _iterator6 = _createForOfIteratorHelper(this.get_dates_to_draw()),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var date = _step6.value;\n          createSVG('text', {\n            x: date.lower_x,\n            y: date.lower_y,\n            innerHTML: date.lower_text,\n            class: 'lower-text',\n            append_to: this.layers.date\n          });\n\n          if (date.upper_text) {\n            var $upper_text = createSVG('text', {\n              x: date.upper_x,\n              y: date.upper_y,\n              innerHTML: date.upper_text,\n              class: 'upper-text',\n              append_to: this.layers.date\n            }); // remove out-of-bound dates\n\n            if ($upper_text.getBBox().x2 > this.layers.grid.getBBox().width) {\n              $upper_text.remove();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"get_dates_to_draw\",\n    value: function get_dates_to_draw() {\n      var _this = this;\n\n      var last_date = null;\n      var dates = this.dates.map(function (date, i) {\n        var d = _this.get_date_info(date, last_date, i);\n\n        last_date = date;\n        return d;\n      });\n      return dates;\n    }\n  }, {\n    key: \"get_date_info\",\n    value: function get_date_info(date, last_date, i) {\n      if (!last_date) {\n        last_date = date_utils.add(date, 1, 'year');\n      }\n\n      var date_text = {\n        'Quarter Day_lower': date_utils.format(date, 'HH', this.options.language),\n        'Half Day_lower': date_utils.format(date, 'HH', this.options.language),\n        Day_lower: date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D', this.options.language) : '',\n        Week_lower: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language),\n        Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n        Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n        'Quarter Day_upper': date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D MMM', this.options.language) : '',\n        'Half Day_upper': date.getDate() !== last_date.getDate() ? date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language) : '',\n        Day_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n        Week_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n        Month_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : '',\n        Year_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : ''\n      };\n      var base_pos = {\n        x: i * this.options.column_width,\n        lower_y: this.options.header_height,\n        upper_y: this.options.header_height - 25\n      };\n      var x_pos = {\n        'Quarter Day_lower': this.options.column_width * 4 / 2,\n        'Quarter Day_upper': 0,\n        'Half Day_lower': this.options.column_width * 2 / 2,\n        'Half Day_upper': 0,\n        Day_lower: this.options.column_width / 2,\n        Day_upper: this.options.column_width * 30 / 2,\n        Week_lower: 0,\n        Week_upper: this.options.column_width * 4 / 2,\n        Month_lower: this.options.column_width / 2,\n        Month_upper: this.options.column_width * 12 / 2,\n        Year_lower: this.options.column_width / 2,\n        Year_upper: this.options.column_width * 30 / 2\n      };\n      return {\n        upper_text: date_text[\"\".concat(this.options.view_mode, \"_upper\")],\n        lower_text: date_text[\"\".concat(this.options.view_mode, \"_lower\")],\n        upper_x: base_pos.x + x_pos[\"\".concat(this.options.view_mode, \"_upper\")],\n        upper_y: base_pos.upper_y,\n        lower_x: base_pos.x + x_pos[\"\".concat(this.options.view_mode, \"_lower\")],\n        lower_y: base_pos.lower_y\n      };\n    }\n  }, {\n    key: \"make_bars\",\n    value: function make_bars() {\n      var _this2 = this;\n\n      this.bars = this.tasks.map(function (task) {\n        var bar = new Bar(_this2, task);\n\n        _this2.layers.bar.appendChild(bar.group);\n\n        return bar;\n      });\n    }\n  }, {\n    key: \"make_arrows\",\n    value: function make_arrows() {\n      var _this3 = this;\n\n      this.arrows = [];\n\n      var _iterator7 = _createForOfIteratorHelper(this.tasks),\n          _step7;\n\n      try {\n        var _loop = function _loop() {\n          var task = _step7.value;\n          var arrows = [];\n          arrows = task.dependencies.map(function (task_id) {\n            var dependency = _this3.get_task(task_id);\n\n            if (!dependency) return;\n            var arrow = new Arrow(_this3, _this3.bars[dependency._index], // from_task\n            _this3.bars[task._index] // to_task\n            );\n\n            _this3.layers.arrow.appendChild(arrow.element);\n\n            return arrow;\n          }).filter(Boolean); // filter falsy values\n\n          _this3.arrows = _this3.arrows.concat(arrows);\n        };\n\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"map_arrows_on_bars\",\n    value: function map_arrows_on_bars() {\n      var _this4 = this;\n\n      var _iterator8 = _createForOfIteratorHelper(this.bars),\n          _step8;\n\n      try {\n        var _loop2 = function _loop2() {\n          var bar = _step8.value;\n          bar.arrows = _this4.arrows.filter(function (arrow) {\n            return arrow.from_task.task.id === bar.task.id || arrow.to_task.task.id === bar.task.id;\n          });\n        };\n\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"set_width\",\n    value: function set_width() {\n      var cur_width = this.$svg.getBoundingClientRect().width;\n      var actual_width = this.$svg.querySelector('.grid .grid-row').getAttribute('width');\n\n      if (cur_width < actual_width) {\n        this.$svg.setAttribute('width', actual_width);\n      }\n    }\n  }, {\n    key: \"set_scroll_position\",\n    value: function set_scroll_position() {\n      var parent_element = this.$svg.parentElement;\n      if (!parent_element) return;\n      var hours_before_first_task = date_utils.diff(this.get_oldest_starting_date(), this.gantt_start, 'hour');\n      var scroll_pos = hours_before_first_task / this.options.step * this.options.column_width - this.options.column_width;\n      parent_element.scrollLeft = scroll_pos;\n    }\n  }, {\n    key: \"bind_grid_click\",\n    value: function bind_grid_click() {\n      var _this5 = this;\n\n      $.on(this.$svg, this.options.popup_trigger, '.grid-row, .grid-header', function () {\n        _this5.unselect_all();\n\n        _this5.hide_popup();\n      });\n    }\n  }, {\n    key: \"bind_bar_events\",\n    value: function bind_bar_events() {\n      var _this6 = this;\n\n      var is_dragging = false;\n      var x_on_start = 0;\n      var y_on_start = 0;\n      var is_resizing_left = false;\n      var is_resizing_right = false;\n      var parent_bar_id = null;\n      var bars = []; // instanceof Bar\n\n      this.bar_being_dragged = null;\n\n      function action_in_progress() {\n        return is_dragging || is_resizing_left || is_resizing_right;\n      }\n\n      $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', function (e, element) {\n        var bar_wrapper = $.closest('.bar-wrapper', element);\n\n        if (element.classList.contains('left')) {\n          is_resizing_left = true;\n        } else if (element.classList.contains('right')) {\n          is_resizing_right = true;\n        } else if (element.classList.contains('bar-wrapper')) {\n          is_dragging = true;\n        }\n\n        bar_wrapper.classList.add('active');\n        x_on_start = e.offsetX;\n        y_on_start = e.offsetY;\n        parent_bar_id = bar_wrapper.getAttribute('data-id');\n        var ids = [parent_bar_id].concat(_toConsumableArray(_this6.get_all_dependent_tasks(parent_bar_id)));\n        bars = ids.map(function (id) {\n          return _this6.get_bar(id);\n        });\n        _this6.bar_being_dragged = parent_bar_id;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          $bar.ox = $bar.getX();\n          $bar.oy = $bar.getY();\n          $bar.owidth = $bar.getWidth();\n          $bar.finaldx = 0;\n        });\n      });\n      $.on(this.$svg, 'mousemove', function (e) {\n        if (!action_in_progress()) return;\n        var dx = e.offsetX - x_on_start;\n        var dy = e.offsetY - y_on_start;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          $bar.finaldx = _this6.get_snap_position(dx);\n\n          if (is_resizing_left) {\n            if (parent_bar_id === bar.task.id) {\n              bar.update_bar_position({\n                x: $bar.ox + $bar.finaldx,\n                width: $bar.owidth - $bar.finaldx\n              });\n            } else {\n              bar.update_bar_position({\n                x: $bar.ox + $bar.finaldx\n              });\n            }\n          } else if (is_resizing_right) {\n            if (parent_bar_id === bar.task.id) {\n              bar.update_bar_position({\n                width: $bar.owidth + $bar.finaldx\n              });\n            }\n          } else if (is_dragging) {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx\n            });\n          }\n        });\n      });\n      document.addEventListener('mouseup', function (e) {\n        if (is_dragging || is_resizing_left || is_resizing_right) {\n          bars.forEach(function (bar) {\n            return bar.group.classList.remove('active');\n          });\n        }\n\n        is_dragging = false;\n        is_resizing_left = false;\n        is_resizing_right = false;\n      });\n      $.on(this.$svg, 'mouseup', function (e) {\n        _this6.bar_being_dragged = null;\n        bars.forEach(function (bar) {\n          var $bar = bar.$bar;\n          if (!$bar.finaldx) return;\n          bar.date_changed();\n          bar.set_action_completed();\n        });\n      });\n      this.bind_bar_progress();\n    }\n  }, {\n    key: \"bind_bar_progress\",\n    value: function bind_bar_progress() {\n      var _this7 = this;\n\n      var x_on_start = 0;\n      var y_on_start = 0;\n      var is_resizing = null;\n      var bar = null;\n      var $bar_progress = null;\n      var $bar = null;\n      $.on(this.$svg, 'mousedown', '.handle.progress', function (e, handle) {\n        is_resizing = true;\n        x_on_start = e.offsetX;\n        y_on_start = e.offsetY;\n        var $bar_wrapper = $.closest('.bar-wrapper', handle);\n        var id = $bar_wrapper.getAttribute('data-id');\n        bar = _this7.get_bar(id);\n        $bar_progress = bar.$bar_progress;\n        $bar = bar.$bar;\n        $bar_progress.finaldx = 0;\n        $bar_progress.owidth = $bar_progress.getWidth();\n        $bar_progress.min_dx = -$bar_progress.getWidth();\n        $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n      });\n      $.on(this.$svg, 'mousemove', function (e) {\n        if (!is_resizing) return;\n        var dx = e.offsetX - x_on_start;\n        var dy = e.offsetY - y_on_start;\n\n        if (dx > $bar_progress.max_dx) {\n          dx = $bar_progress.max_dx;\n        }\n\n        if (dx < $bar_progress.min_dx) {\n          dx = $bar_progress.min_dx;\n        }\n\n        var $handle = bar.$handle_progress;\n        $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n        $.attr($handle, 'points', bar.get_progress_polygon_points());\n        $bar_progress.finaldx = dx;\n      });\n      $.on(this.$svg, 'mouseup', function () {\n        is_resizing = false;\n        if (!($bar_progress && $bar_progress.finaldx)) return;\n        bar.progress_changed();\n        bar.set_action_completed();\n      });\n    }\n  }, {\n    key: \"get_all_dependent_tasks\",\n    value: function get_all_dependent_tasks(task_id) {\n      var _this8 = this;\n\n      var out = [];\n      var to_process = [task_id];\n\n      while (to_process.length) {\n        var deps = to_process.reduce(function (acc, curr) {\n          acc = acc.concat(_this8.dependency_map[curr]);\n          return acc;\n        }, []);\n        out = out.concat(deps);\n        to_process = deps.filter(function (d) {\n          return !to_process.includes(d);\n        });\n      }\n\n      return out.filter(Boolean);\n    }\n  }, {\n    key: \"get_snap_position\",\n    value: function get_snap_position(dx) {\n      var odx = dx,\n          rem,\n          position;\n\n      if (this.view_is('Week')) {\n        rem = dx % (this.options.column_width / 7);\n        position = odx - rem + (rem < this.options.column_width / 14 ? 0 : this.options.column_width / 7);\n      } else if (this.view_is('Month')) {\n        rem = dx % (this.options.column_width / 30);\n        position = odx - rem + (rem < this.options.column_width / 60 ? 0 : this.options.column_width / 30);\n      } else {\n        rem = dx % this.options.column_width;\n        position = odx - rem + (rem < this.options.column_width / 2 ? 0 : this.options.column_width);\n      }\n\n      return position;\n    }\n  }, {\n    key: \"unselect_all\",\n    value: function unselect_all() {\n      _toConsumableArray(this.$svg.querySelectorAll('.bar-wrapper')).forEach(function (el) {\n        el.classList.remove('active');\n      });\n    }\n  }, {\n    key: \"view_is\",\n    value: function view_is(modes) {\n      var _this9 = this;\n\n      if (typeof modes === 'string') {\n        return this.options.view_mode === modes;\n      }\n\n      if (Array.isArray(modes)) {\n        return modes.some(function (mode) {\n          return _this9.options.view_mode === mode;\n        });\n      }\n\n      return false;\n    }\n  }, {\n    key: \"get_task\",\n    value: function get_task(id) {\n      return this.tasks.find(function (task) {\n        return task.id === id;\n      });\n    }\n  }, {\n    key: \"get_bar\",\n    value: function get_bar(id) {\n      return this.bars.find(function (bar) {\n        return bar.task.id === id;\n      });\n    }\n  }, {\n    key: \"show_popup\",\n    value: function show_popup(options) {\n      if (!this.popup) {\n        this.popup = new Popup(this.popup_wrapper, this.options.custom_popup_html);\n      }\n\n      this.popup.show(options);\n    }\n  }, {\n    key: \"hide_popup\",\n    value: function hide_popup() {\n      this.popup && this.popup.hide();\n    }\n  }, {\n    key: \"trigger_event\",\n    value: function trigger_event(event, args) {\n      if (this.options['on_' + event]) {\n        this.options['on_' + event].apply(null, args);\n      }\n    }\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n\n  }, {\n    key: \"get_oldest_starting_date\",\n    value: function get_oldest_starting_date() {\n      return this.tasks.map(function (task) {\n        return task._start;\n      }).reduce(function (prev_date, cur_date) {\n        return cur_date <= prev_date ? cur_date : prev_date;\n      });\n    }\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.$svg.innerHTML = '';\n    }\n  }]);\n\n  return Gantt;\n}();\n\nexport { Gantt as default };\n\nfunction generate_id(task) {\n  return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/node_modules/frappe-gantt/src/index.js"],"names":["date_utils","$","createSVG","Bar","Arrow","Popup","Gantt","wrapper","tasks","options","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","element","svg_element","wrapper_element","document","querySelector","HTMLElement","SVGElement","TypeError","$svg","append_to","class","classList","add","$container","createElement","parent_element","parentElement","appendChild","popup_wrapper","default_options","header_height","column_width","step","view_modes","bar_height","bar_corner_radius","arrow_curve","padding","view_mode","date_format","popup_trigger","custom_popup_html","language","Object","assign","map","task","i","_start","parse","start","_end","end","diff","_index","today","task_end_values","get_date_values","slice","every","d","invalid","dependencies","deps","split","trim","filter","id","generate_id","setup_dependencies","dependency_map","t","push","mode","update_view_scale","setup_dates","render","trigger_event","setup_gantt_dates","setup_date_values","gantt_start","gantt_end","start_of","view_is","dates","cur_date","clone","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","length","grid_height","x","y","width","height","grid","attr","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","header_width","tick_x","tick_y","tick_height","date","tick_class","getDate","getMonth","get_days_in_month","get_dates_to_draw","lower_x","lower_y","innerHTML","lower_text","upper_text","$upper_text","upper_x","upper_y","getBBox","remove","last_date","get_date_info","date_text","format","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","getFullYear","Year_upper","base_pos","x_pos","bars","bar","group","arrows","task_id","dependency","get_task","arrow","Boolean","concat","from_task","to_task","cur_width","getBoundingClientRect","actual_width","getAttribute","setAttribute","hours_before_first_task","get_oldest_starting_date","scroll_pos","scrollLeft","on","unselect_all","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_being_dragged","action_in_progress","e","bar_wrapper","closest","contains","offsetX","offsetY","ids","get_all_dependent_tasks","get_bar","forEach","$bar","ox","getX","oy","getY","owidth","getWidth","finaldx","dx","dy","get_snap_position","update_bar_position","addEventListener","date_changed","set_action_completed","bind_bar_progress","is_resizing","$bar_progress","handle","$bar_wrapper","min_dx","max_dx","$handle","$handle_progress","get_progress_polygon_points","progress_changed","out","to_process","reduce","acc","curr","includes","odx","rem","position","querySelectorAll","el","modes","Array","isArray","some","find","popup","show","hide","event","args","apply","prev_date","name","Math","random","toString"],"mappings":"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","sourcesContent":["import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'FrappÃ© Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt'\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [\n                'Quarter Day',\n                'Half Day',\n                'Day',\n                'Week',\n                'Month',\n                'Year'\n            ],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en'\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every(d => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map(d => d.trim())\n                        .filter(d => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === 'Day') {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Half Day') {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Quarter Day') {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === 'Week') {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === 'Month') {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === 'Year') {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is(['Quarter Day', 'Half Day'])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is('Month')) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is('Year')) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is('Year')) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is('Month')) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%'\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is('Day') && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is('Week') &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (this.view_is('Month') && (date.getMonth() + 1) % 3 === 0) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid\n            });\n\n            if (this.view_is('Month')) {\n                tick_x +=\n                    date_utils.get_days_in_month(date) *\n                    this.options.column_width /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is('Day')) {\n            const x =\n                date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                this.options.step *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                      ? date_utils.format(date, 'D MMM', this.options.language)\n                      : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : ''\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': this.options.column_width * 4 / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': this.options.column_width * 2 / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: this.options.column_width * 30 / 2,\n            Week_lower: 0,\n            Week_upper: this.options.column_width * 4 / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: this.options.column_width * 12 / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: this.options.column_width * 30 / 2\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map(task => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map(task_id => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter(arrow => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            hours_before_first_task /\n                this.options.step *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id)\n            ];\n            bars = ids.map(id => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', e => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach(bar => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', e => {\n            this.bar_being_dragged = null;\n            bars.forEach(bar => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', e => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter(d => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is('Week')) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is('Month')) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some(mode => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find(task => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find(bar => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map(task => task._start)\n            .reduce(\n                (prev_date, cur_date) =>\n                    cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nfunction generate_id(task) {\n    return (\n        task.name +\n        '_' +\n        Math.random()\n            .toString(36)\n            .slice(2, 12)\n    );\n}\n"]},"metadata":{},"sourceType":"module"}