{"ast":null,"code":"import { LOGIN_USER, LOGIN_USER_SUCCESS, LOGIN_USER_FAILED, LOGOUT_USER, REGISTER_USER, REGISTER_USER_SUCCESS, REGISTER_USER_FAILED, FORGET_PASSWORD, FORGET_PASSWORD_SUCCESS, FORGET_PASSWORD_FAILED } from './constants';\nexport var loginUser = function loginUser(username, password) {\n  return {\n    type: LOGIN_USER,\n    payload: {\n      username,\n      password\n    }\n  };\n};\nexport var loginUserSuccess = function loginUserSuccess(user) {\n  return {\n    type: LOGIN_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var loginUserFailed = function loginUserFailed(error) {\n  return {\n    type: LOGIN_USER_FAILED,\n    payload: error\n  };\n};\nexport var registerUser = function registerUser(fullname, email, password) {\n  return {\n    type: REGISTER_USER,\n    payload: {\n      fullname,\n      email,\n      password\n    }\n  };\n};\nexport var registerUserSuccess = function registerUserSuccess(user) {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: user\n  };\n};\nexport var registerUserFailed = function registerUserFailed(error) {\n  return {\n    type: REGISTER_USER_FAILED,\n    payload: error\n  };\n};\nexport var logoutUser = function logoutUser(history) {\n  return {\n    type: LOGOUT_USER,\n    payload: {\n      history\n    }\n  };\n};\nexport var forgetPassword = function forgetPassword(username) {\n  return {\n    type: FORGET_PASSWORD,\n    payload: {\n      username\n    }\n  };\n};\nexport var forgetPasswordSuccess = function forgetPasswordSuccess(passwordResetStatus) {\n  return {\n    type: FORGET_PASSWORD_SUCCESS,\n    payload: passwordResetStatus\n  };\n};\nexport var forgetPasswordFailed = function forgetPasswordFailed(error) {\n  return {\n    type: FORGET_PASSWORD_FAILED,\n    payload: error\n  };\n};","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/redux/auth/actions.js"],"names":["LOGIN_USER","LOGIN_USER_SUCCESS","LOGIN_USER_FAILED","LOGOUT_USER","REGISTER_USER","REGISTER_USER_SUCCESS","REGISTER_USER_FAILED","FORGET_PASSWORD","FORGET_PASSWORD_SUCCESS","FORGET_PASSWORD_FAILED","loginUser","username","password","type","payload","loginUserSuccess","user","loginUserFailed","error","registerUser","fullname","email","registerUserSuccess","registerUserFailed","logoutUser","history","forgetPassword","forgetPasswordSuccess","passwordResetStatus","forgetPasswordFailed"],"mappings":"AACA,SACIA,UADJ,EAEIC,kBAFJ,EAGIC,iBAHJ,EAIIC,WAJJ,EAKIC,aALJ,EAMIC,qBANJ,EAOIC,oBAPJ,EAQIC,eARJ,EASIC,uBATJ,EAUIC,sBAVJ,QAWO,aAXP;AAeA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAmBC,QAAnB;AAAA,SAAqD;AAC1EC,IAAAA,IAAI,EAAEb,UADoE;AAE1Ec,IAAAA,OAAO,EAAE;AAAEH,MAAAA,QAAF;AAAYC,MAAAA;AAAZ;AAFiE,GAArD;AAAA,CAAlB;AAKP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD;AAAA,SAA+B;AAC3DH,IAAAA,IAAI,EAAEZ,kBADqD;AAE3Da,IAAAA,OAAO,EAAEE;AAFkD,GAA/B;AAAA,CAAzB;AAKP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAgC;AAC3DL,IAAAA,IAAI,EAAEX,iBADqD;AAE3DY,IAAAA,OAAO,EAAEI;AAFkD,GAAhC;AAAA,CAAxB;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAmBC,KAAnB,EAAkCT,QAAlC;AAAA,SAAoE;AAC5FC,IAAAA,IAAI,EAAET,aADsF;AAE5FU,IAAAA,OAAO,EAAE;AAAEM,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBT,MAAAA;AAAnB;AAFmF,GAApE;AAAA,CAArB;AAKP,OAAO,IAAMU,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,IAAD;AAAA,SAA2B;AAC1DH,IAAAA,IAAI,EAAER,qBADoD;AAE1DS,IAAAA,OAAO,EAAEE;AAFiD,GAA3B;AAAA,CAA5B;AAKP,OAAO,IAAMO,kBAAkB,GAAG,SAArBA,kBAAqB,CAACL,KAAD;AAAA,SAAgC;AAC9DL,IAAAA,IAAI,EAAEP,oBADwD;AAE9DQ,IAAAA,OAAO,EAAEI;AAFqD,GAAhC;AAAA,CAA3B;AAKP,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD;AAAA,SAA+B;AACrDZ,IAAAA,IAAI,EAAEV,WAD+C;AAErDW,IAAAA,OAAO,EAAE;AAAEW,MAAAA;AAAF;AAF4C,GAA/B;AAAA,CAAnB;AAKP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACf,QAAD;AAAA,SAAmC;AAC7DE,IAAAA,IAAI,EAAEN,eADuD;AAE7DO,IAAAA,OAAO,EAAE;AAAEH,MAAAA;AAAF;AAFoD,GAAnC;AAAA,CAAvB;AAKP,OAAO,IAAMgB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,mBAAD;AAAA,SAA8C;AAC/Ef,IAAAA,IAAI,EAAEL,uBADyE;AAE/EM,IAAAA,OAAO,EAAEc;AAFsE,GAA9C;AAAA,CAA9B;AAKP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,KAAD;AAAA,SAAgC;AAChEL,IAAAA,IAAI,EAAEJ,sBAD0D;AAEhEK,IAAAA,OAAO,EAAEI;AAFuD,GAAhC;AAAA,CAA7B","sourcesContent":["// @flow\nimport {\n    LOGIN_USER,\n    LOGIN_USER_SUCCESS,\n    LOGIN_USER_FAILED,\n    LOGOUT_USER,\n    REGISTER_USER,\n    REGISTER_USER_SUCCESS,\n    REGISTER_USER_FAILED,\n    FORGET_PASSWORD,\n    FORGET_PASSWORD_SUCCESS,\n    FORGET_PASSWORD_FAILED,\n} from './constants';\n\ntype AuthAction = { type: string, payload: {} | string };\n\nexport const loginUser = (username: string, password: string): AuthAction => ({\n    type: LOGIN_USER,\n    payload: { username, password },\n});\n\nexport const loginUserSuccess = (user: string): AuthAction => ({\n    type: LOGIN_USER_SUCCESS,\n    payload: user,\n});\n\nexport const loginUserFailed = (error: string): AuthAction => ({\n    type: LOGIN_USER_FAILED,\n    payload: error,\n});\n\nexport const registerUser = (fullname: string, email: string, password: string): AuthAction => ({\n    type: REGISTER_USER,\n    payload: { fullname, email, password },\n});\n\nexport const registerUserSuccess = (user: {}): AuthAction => ({\n    type: REGISTER_USER_SUCCESS,\n    payload: user,\n});\n\nexport const registerUserFailed = (error: string): AuthAction => ({\n    type: REGISTER_USER_FAILED,\n    payload: error,\n});\n\nexport const logoutUser = (history: any): AuthAction => ({\n    type: LOGOUT_USER,\n    payload: { history },\n});\n\nexport const forgetPassword = (username: string): AuthAction => ({\n    type: FORGET_PASSWORD,\n    payload: { username },\n});\n\nexport const forgetPasswordSuccess = (passwordResetStatus: string): AuthAction => ({\n    type: FORGET_PASSWORD_SUCCESS,\n    payload: passwordResetStatus,\n});\n\nexport const forgetPasswordFailed = (error: string): AuthAction => ({\n    type: FORGET_PASSWORD_FAILED,\n    payload: error,\n});\n"]},"metadata":{},"sourceType":"module"}