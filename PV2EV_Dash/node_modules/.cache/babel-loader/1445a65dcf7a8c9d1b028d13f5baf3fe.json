{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _toConsumableArray from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(initMenuAndItems),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(changeActiveMenuFromLocation),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchMenuInit),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchMenuChange),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(appMenuSaga);\n\nimport { all, call, put, fork, takeEvery } from 'redux-saga/effects';\nimport { INIT_MENU, CHANGE_ACTIVE_MENU_FROM_LOCATION } from './constants';\nimport { authProtectedRoutes as routes } from '../../routes';\nimport assignIds from './utils';\nimport { initMenuSuccess, changeActiveMenuFromLocationSuccess } from './actions';\n/**\r\n * Activate menu items from location\r\n * @param {*} menuItems\r\n */\n\nvar getActivatedMenuItemIds = function getActivatedMenuItemIds(menuItems) {\n  var matchingItems = [];\n\n  var _iterator = _createForOfIteratorHelper(menuItems),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var menuItem = _step.value;\n\n      if (window.location.pathname.indexOf(menuItem.path) === 0) {\n        matchingItems.push(menuItem.id);\n      }\n\n      if (typeof menuItem.children !== 'undefined') {\n        matchingItems = [].concat(_toConsumableArray(matchingItems), _toConsumableArray(getActivatedMenuItemIds(menuItem.children)));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return matchingItems;\n};\n/**\r\n * Initilizes the menu\r\n */\n\n\nfunction initMenuAndItems() {\n  var menuItems;\n  return _regeneratorRuntime.wrap(function initMenuAndItems$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          menuItems = assignIds(routes);\n          _context.next = 4;\n          return put(initMenuSuccess(menuItems));\n\n        case 4:\n          _context.next = 8;\n          break;\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 6]]);\n}\n/**\r\n * change the active menu item based on location\r\n */\n\n\nfunction changeActiveMenuFromLocation() {\n  var menuItems, activatedMenuItemIds;\n  return _regeneratorRuntime.wrap(function changeActiveMenuFromLocation$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          menuItems = assignIds(routes);\n          _context2.next = 4;\n          return call(getActivatedMenuItemIds, menuItems);\n\n        case 4:\n          activatedMenuItemIds = _context2.sent;\n          _context2.next = 7;\n          return put(changeActiveMenuFromLocationSuccess(activatedMenuItemIds));\n\n        case 7:\n          _context2.next = 11;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n/**\r\n * Watchers\r\n */\n\n\nexport function watchMenuInit() {\n  return _regeneratorRuntime.wrap(function watchMenuInit$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(INIT_MENU, initMenuAndItems);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchMenuChange() {\n  return _regeneratorRuntime.wrap(function watchMenuChange$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(CHANGE_ACTIVE_MENU_FROM_LOCATION, changeActiveMenuFromLocation);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction appMenuSaga() {\n  return _regeneratorRuntime.wrap(function appMenuSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchMenuInit), fork(watchMenuChange)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default appMenuSaga;","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/redux/appMenu/saga.js"],"names":["initMenuAndItems","changeActiveMenuFromLocation","watchMenuInit","watchMenuChange","appMenuSaga","all","call","put","fork","takeEvery","INIT_MENU","CHANGE_ACTIVE_MENU_FROM_LOCATION","authProtectedRoutes","routes","assignIds","initMenuSuccess","changeActiveMenuFromLocationSuccess","getActivatedMenuItemIds","menuItems","matchingItems","menuItem","window","location","pathname","indexOf","path","push","id","children","activatedMenuItemIds"],"mappings":";;;;oDA6BUA,gB;qDAUAC,4B;qDAWOC,a;qDAIAC,e;qDAIPC,W;;AAzDV,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,SAAT,EAAoBC,gCAApB,QAA4D,aAA5D;AACA,SAASC,mBAAmB,IAAIC,MAAhC,QAA8C,cAA9C;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,SAASC,eAAT,EAA0BC,mCAA1B,QAAqE,WAArE;AAEA;;;;;AAIA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,SAAS,EAAI;AACzC,MAAIC,aAAa,GAAG,EAApB;;AADyC,6CAEpBD,SAFoB;AAAA;;AAAA;AAEzC,wDAAgC;AAAA,UAAvBE,QAAuB;;AAC5B,UAAIC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiCJ,QAAQ,CAACK,IAA1C,MAAoD,CAAxD,EAA2D;AACvDN,QAAAA,aAAa,CAACO,IAAd,CAAmBN,QAAQ,CAACO,EAA5B;AACH;;AAED,UAAI,OAAOP,QAAQ,CAACQ,QAAhB,KAA6B,WAAjC,EAA8C;AAC1CT,QAAAA,aAAa,gCAAOA,aAAP,sBAAyBF,uBAAuB,CAACG,QAAQ,CAACQ,QAAV,CAAhD,EAAb;AACH;AACJ;AAVwC;AAAA;AAAA;AAAA;AAAA;;AAWzC,SAAOT,aAAP;AACH,CAZD;AAcA;;;;;AAGA,SAAUnB,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEckB,UAAAA,SAFd,GAE0BJ,SAAS,CAACD,MAAD,CAFnC;AAAA;AAGQ,iBAAMN,GAAG,CAACQ,eAAe,CAACG,SAAD,CAAhB,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;;AAGA,SAAUjB,4BAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEciB,UAAAA,SAFd,GAE0BJ,SAAS,CAACD,MAAD,CAFnC;AAAA;AAGqC,iBAAMP,IAAI,CAACW,uBAAD,EAA0BC,SAA1B,CAAV;;AAHrC;AAGcW,UAAAA,oBAHd;AAAA;AAIQ,iBAAMtB,GAAG,CAACS,mCAAmC,CAACa,oBAAD,CAApC,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;;AAGA,OAAO,SAAU3B,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMO,SAAS,CAACC,SAAD,EAAYV,gBAAZ,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUG,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMM,SAAS,CAACE,gCAAD,EAAmCV,4BAAnC,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIP,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMC,GAAG,CAAC,CAACG,IAAI,CAACN,aAAD,CAAL,EAAsBM,IAAI,CAACL,eAAD,CAA1B,CAAD,CAAT;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,WAAf","sourcesContent":["// @flow\r\nimport { all, call, put, fork, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { INIT_MENU, CHANGE_ACTIVE_MENU_FROM_LOCATION } from './constants';\r\nimport { authProtectedRoutes as routes } from '../../routes';\r\nimport assignIds from './utils';\r\nimport { initMenuSuccess, changeActiveMenuFromLocationSuccess } from './actions';\r\n\r\n/**\r\n * Activate menu items from location\r\n * @param {*} menuItems\r\n */\r\nconst getActivatedMenuItemIds = menuItems => {\r\n    var matchingItems = [];\r\n    for (var menuItem of menuItems) {\r\n        if (window.location.pathname.indexOf(menuItem.path) === 0) {\r\n            matchingItems.push(menuItem.id);\r\n        }\r\n\r\n        if (typeof menuItem.children !== 'undefined') {\r\n            matchingItems = [...matchingItems, ...getActivatedMenuItemIds(menuItem.children)];\r\n        }\r\n    }\r\n    return matchingItems;\r\n};\r\n\r\n/**\r\n * Initilizes the menu\r\n */\r\nfunction* initMenuAndItems() {\r\n    try {\r\n        const menuItems = assignIds(routes);\r\n        yield put(initMenuSuccess(menuItems));\r\n    } catch (error) {}\r\n}\r\n\r\n/**\r\n * change the active menu item based on location\r\n */\r\nfunction* changeActiveMenuFromLocation() {\r\n    try {\r\n        const menuItems = assignIds(routes);\r\n        const activatedMenuItemIds = yield call(getActivatedMenuItemIds, menuItems);\r\n        yield put(changeActiveMenuFromLocationSuccess(activatedMenuItemIds));\r\n    } catch (error) {}\r\n}\r\n\r\n/**\r\n * Watchers\r\n */\r\nexport function* watchMenuInit(): any {\r\n    yield takeEvery(INIT_MENU, initMenuAndItems);\r\n}\r\n\r\nexport function* watchMenuChange(): any {\r\n    yield takeEvery(CHANGE_ACTIVE_MENU_FROM_LOCATION, changeActiveMenuFromLocation);\r\n}\r\n\r\nfunction* appMenuSaga(): any {\r\n    yield all([fork(watchMenuInit), fork(watchMenuChange)]);\r\n}\r\n\r\nexport default appMenuSaga;\r\n"]},"metadata":{},"sourceType":"module"}