{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(register),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(forgetPassword),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoginUser),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogoutUser),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRegisterUser),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchForgetPassword),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(authSaga);\n\nimport { Cookies } from 'react-cookie';\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { fetchJSON } from '../../helpers/api';\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, FORGET_PASSWORD } from './constants';\nimport { loginUserSuccess, loginUserFailed, registerUserSuccess, registerUserFailed, forgetPasswordSuccess, forgetPasswordFailed } from './actions';\n/**\r\n * Sets the session\r\n * @param {*} user\r\n */\n\nvar setSession = function setSession(user) {\n  var cookies = new Cookies();\n  if (user) cookies.set('user', JSON.stringify(user), {\n    path: '/'\n  });else cookies.remove('user', {\n    path: '/'\n  });\n};\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\n\n\nfunction login(_ref) {\n  var _ref$payload, username, password, options, response, message;\n\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, username = _ref$payload.username, password = _ref$payload.password;\n          options = {\n            body: JSON.stringify({\n              username,\n              password\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context.prev = 2;\n          _context.next = 5;\n          return call(fetchJSON, '/users/authenticate', options);\n\n        case 5:\n          response = _context.sent;\n          setSession(response);\n          _context.next = 9;\n          return put(loginUserSuccess(response));\n\n        case 9:\n          _context.next = 24;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](2);\n          _context.t1 = _context.t0.status;\n          _context.next = _context.t1 === 500 ? 16 : _context.t1 === 401 ? 18 : 20;\n          break;\n\n        case 16:\n          message = 'Internal Server Error';\n          return _context.abrupt(\"break\", 21);\n\n        case 18:\n          message = 'Invalid credentials';\n          return _context.abrupt(\"break\", 21);\n\n        case 20:\n          message = _context.t0;\n\n        case 21:\n          _context.next = 23;\n          return put(loginUserFailed(message));\n\n        case 23:\n          setSession(null);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 11]]);\n}\n/**\r\n * Logout the user\r\n * @param {*} param0\r\n */\n\n\nfunction logout(_ref2) {\n  var history;\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          history = _ref2.payload.history;\n          _context2.prev = 1;\n          setSession(null);\n          _context2.next = 5;\n          return call(function () {\n            history.push('/account/login');\n          });\n\n        case 5:\n          _context2.next = 9;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](1);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 7]]);\n}\n/**\r\n * Register the user\r\n */\n\n\nfunction register(_ref3) {\n  var _ref3$payload, fullname, email, password, options, response, message;\n\n  return _regeneratorRuntime.wrap(function register$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, fullname = _ref3$payload.fullname, email = _ref3$payload.email, password = _ref3$payload.password;\n          options = {\n            body: JSON.stringify({\n              fullname,\n              email,\n              password\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchJSON, '/users/register', options);\n\n        case 5:\n          response = _context3.sent;\n          _context3.next = 8;\n          return put(registerUserSuccess(response));\n\n        case 8:\n          _context3.next = 22;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.t1 = _context3.t0.status;\n          _context3.next = _context3.t1 === 500 ? 15 : _context3.t1 === 401 ? 17 : 19;\n          break;\n\n        case 15:\n          message = 'Internal Server Error';\n          return _context3.abrupt(\"break\", 20);\n\n        case 17:\n          message = 'Invalid credentials';\n          return _context3.abrupt(\"break\", 20);\n\n        case 19:\n          message = _context3.t0;\n\n        case 20:\n          _context3.next = 22;\n          return put(registerUserFailed(message));\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 10]]);\n}\n/**\r\n * forget password\r\n */\n\n\nfunction forgetPassword(_ref4) {\n  var username, options, response, message;\n  return _regeneratorRuntime.wrap(function forgetPassword$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          username = _ref4.payload.username;\n          options = {\n            body: JSON.stringify({\n              username\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context4.prev = 2;\n          _context4.next = 5;\n          return call(fetchJSON, '/users/password-reset', options);\n\n        case 5:\n          response = _context4.sent;\n          _context4.next = 8;\n          return put(forgetPasswordSuccess(response.message));\n\n        case 8:\n          _context4.next = 22;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](2);\n          _context4.t1 = _context4.t0.status;\n          _context4.next = _context4.t1 === 500 ? 15 : _context4.t1 === 401 ? 17 : 19;\n          break;\n\n        case 15:\n          message = 'Internal Server Error';\n          return _context4.abrupt(\"break\", 20);\n\n        case 17:\n          message = 'Invalid credentials';\n          return _context4.abrupt(\"break\", 20);\n\n        case 19:\n          message = _context4.t0;\n\n        case 20:\n          _context4.next = 22;\n          return put(forgetPasswordFailed(message));\n\n        case 22:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 10]]);\n}\n\nexport function watchLoginUser() {\n  return _regeneratorRuntime.wrap(function watchLoginUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(LOGIN_USER, login);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchLogoutUser() {\n  return _regeneratorRuntime.wrap(function watchLogoutUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOGOUT_USER, logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watchRegisterUser() {\n  return _regeneratorRuntime.wrap(function watchRegisterUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(REGISTER_USER, register);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function watchForgetPassword() {\n  return _regeneratorRuntime.wrap(function watchForgetPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(FORGET_PASSWORD, forgetPassword);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction authSaga() {\n  return _regeneratorRuntime.wrap(function authSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser), fork(watchForgetPassword)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/redux/auth/saga.js"],"names":["login","logout","register","forgetPassword","watchLoginUser","watchLogoutUser","watchRegisterUser","watchForgetPassword","authSaga","Cookies","all","call","fork","put","takeEvery","fetchJSON","LOGIN_USER","LOGOUT_USER","REGISTER_USER","FORGET_PASSWORD","loginUserSuccess","loginUserFailed","registerUserSuccess","registerUserFailed","forgetPasswordSuccess","forgetPasswordFailed","setSession","user","cookies","set","JSON","stringify","path","remove","payload","username","password","options","body","method","headers","response","status","message","history","push","fullname","email"],"mappings":";;oDA8BUA,K;qDAgCAC,M;qDAYAC,Q;qDA6BAC,c;qDA0BOC,c;qDAIAC,e;qDAIAC,iB;qDAIAC,mB;qDAIPC,Q;;AAhJV,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,aAAlC,EAAiDC,eAAjD,QAAwE,aAAxE;AAEA,SACIC,gBADJ,EAEIC,eAFJ,EAGIC,mBAHJ,EAIIC,kBAJJ,EAKIC,qBALJ,EAMIC,oBANJ,QAOO,WAPP;AASA;;;;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,IAAI,EAAI;AACvB,MAAIC,OAAO,GAAG,IAAInB,OAAJ,EAAd;AACA,MAAIkB,IAAJ,EAAUC,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAApB,EAA0C;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAA1C,EAAV,KACKJ,OAAO,CAACK,MAAR,CAAe,MAAf,EAAuB;AAAED,IAAAA,IAAI,EAAE;AAAR,GAAvB;AACR,CAJD;AAKA;;;;;;AAIA,SAAUhC,KAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkBkC,OAAlB,EAA6BC,QAA7B,gBAA6BA,QAA7B,EAAuCC,QAAvC,gBAAuCA,QAAvC;AACUC,UAAAA,OADV,GACoB;AACZC,YAAAA,IAAI,EAAER,IAAI,CAACC,SAAL,CAAe;AAAEI,cAAAA,QAAF;AAAYC,cAAAA;AAAZ,aAAf,CADM;AAEZG,YAAAA,MAAM,EAAE,MAFI;AAGZC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AAHG,WADpB;AAAA;AAAA;AAQyB,iBAAM7B,IAAI,CAACI,SAAD,EAAY,qBAAZ,EAAmCsB,OAAnC,CAAV;;AARzB;AAQcI,UAAAA,QARd;AASQf,UAAAA,UAAU,CAACe,QAAD,CAAV;AATR;AAUQ,iBAAM5B,GAAG,CAACO,gBAAgB,CAACqB,QAAD,CAAjB,CAAT;;AAVR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,wBAagB,YAAMC,MAbtB;AAAA,0CAciB,GAdjB,wBAiBiB,GAjBjB;AAAA;;AAAA;AAegBC,UAAAA,OAAO,GAAG,uBAAV;AAfhB;;AAAA;AAkBgBA,UAAAA,OAAO,GAAG,qBAAV;AAlBhB;;AAAA;AAqBgBA,UAAAA,OAAO,cAAP;;AArBhB;AAAA;AAuBQ,iBAAM9B,GAAG,CAACQ,eAAe,CAACsB,OAAD,CAAhB,CAAT;;AAvBR;AAwBQjB,UAAAA,UAAU,CAAC,IAAD,CAAV;;AAxBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;;;;;;AAIA,SAAUzB,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B2C,UAAAA,OAA9B,SAAmBV,OAAnB,CAA8BU,OAA9B;AAAA;AAEQlB,UAAAA,UAAU,CAAC,IAAD,CAAV;AAFR;AAGQ,iBAAMf,IAAI,CAAC,YAAM;AACbiC,YAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb;AACH,WAFS,CAAV;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;;AAGA,SAAU3C,QAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAqBgC,OAArB,EAAgCY,QAAhC,iBAAgCA,QAAhC,EAA0CC,KAA1C,iBAA0CA,KAA1C,EAAiDX,QAAjD,iBAAiDA,QAAjD;AACUC,UAAAA,OADV,GACoB;AACZC,YAAAA,IAAI,EAAER,IAAI,CAACC,SAAL,CAAe;AAAEe,cAAAA,QAAF;AAAYC,cAAAA,KAAZ;AAAmBX,cAAAA;AAAnB,aAAf,CADM;AAEZG,YAAAA,MAAM,EAAE,MAFI;AAGZC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AAHG,WADpB;AAAA;AAAA;AAQyB,iBAAM7B,IAAI,CAACI,SAAD,EAAY,iBAAZ,EAA+BsB,OAA/B,CAAV;;AARzB;AAQcI,UAAAA,QARd;AAAA;AASQ,iBAAM5B,GAAG,CAACS,mBAAmB,CAACmB,QAAD,CAApB,CAAT;;AATR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,yBAYgB,aAAMC,MAZtB;AAAA,4CAaiB,GAbjB,yBAgBiB,GAhBjB;AAAA;;AAAA;AAcgBC,UAAAA,OAAO,GAAG,uBAAV;AAdhB;;AAAA;AAiBgBA,UAAAA,OAAO,GAAG,qBAAV;AAjBhB;;AAAA;AAoBgBA,UAAAA,OAAO,eAAP;;AApBhB;AAAA;AAsBQ,iBAAM9B,GAAG,CAACU,kBAAkB,CAACoB,OAAD,CAAnB,CAAT;;AAtBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;;AAGA,SAAUxC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsCgC,UAAAA,QAAtC,SAA2BD,OAA3B,CAAsCC,QAAtC;AACUE,UAAAA,OADV,GACoB;AACZC,YAAAA,IAAI,EAAER,IAAI,CAACC,SAAL,CAAe;AAAEI,cAAAA;AAAF,aAAf,CADM;AAEZI,YAAAA,MAAM,EAAE,MAFI;AAGZC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB;AAHG,WADpB;AAAA;AAAA;AAQyB,iBAAM7B,IAAI,CAACI,SAAD,EAAY,uBAAZ,EAAqCsB,OAArC,CAAV;;AARzB;AAQcI,UAAAA,QARd;AAAA;AASQ,iBAAM5B,GAAG,CAACW,qBAAqB,CAACiB,QAAQ,CAACE,OAAV,CAAtB,CAAT;;AATR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,yBAYgB,aAAMD,MAZtB;AAAA,4CAaiB,GAbjB,yBAgBiB,GAhBjB;AAAA;;AAAA;AAcgBC,UAAAA,OAAO,GAAG,uBAAV;AAdhB;;AAAA;AAiBgBA,UAAAA,OAAO,GAAG,qBAAV;AAjBhB;;AAAA;AAoBgBA,UAAAA,OAAO,eAAP;;AApBhB;AAAA;AAsBQ,iBAAM9B,GAAG,CAACY,oBAAoB,CAACkB,OAAD,CAArB,CAAT;;AAtBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BA,OAAO,SAAUvC,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMU,SAAS,CAACE,UAAD,EAAahB,KAAb,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUK,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMS,SAAS,CAACG,WAAD,EAAchB,MAAd,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUK,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMQ,SAAS,CAACI,aAAD,EAAgBhB,QAAhB,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUK,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMO,SAAS,CAACK,eAAD,EAAkBhB,cAAlB,CAAf;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIP,SAAUK,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAME,GAAG,CAAC,CAACE,IAAI,CAACR,cAAD,CAAL,EAAuBQ,IAAI,CAACP,eAAD,CAA3B,EAA8CO,IAAI,CAACN,iBAAD,CAAlD,EAAuEM,IAAI,CAACL,mBAAD,CAA3E,CAAD,CAAT;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAeC,QAAf","sourcesContent":["// @flow\r\nimport { Cookies } from 'react-cookie';\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { fetchJSON } from '../../helpers/api';\r\n\r\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, FORGET_PASSWORD } from './constants';\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserFailed,\r\n    registerUserSuccess,\r\n    registerUserFailed,\r\n    forgetPasswordSuccess,\r\n    forgetPasswordFailed,\r\n} from './actions';\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user\r\n */\r\nconst setSession = user => {\r\n    let cookies = new Cookies();\r\n    if (user) cookies.set('user', JSON.stringify(user), { path: '/' });\r\n    else cookies.remove('user', { path: '/' });\r\n};\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\r\nfunction* login({ payload: { username, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/authenticate', options);\r\n        setSession(response);\r\n        yield put(loginUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(loginUserFailed(message));\r\n        setSession(null);\r\n    }\r\n}\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0\r\n */\r\nfunction* logout({ payload: { history } }) {\r\n    try {\r\n        setSession(null);\r\n        yield call(() => {\r\n            history.push('/account/login');\r\n        });\r\n    } catch (error) {}\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { fullname, email, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ fullname, email, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/register', options);\r\n        yield put(registerUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(registerUserFailed(message));\r\n    }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { username } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/password-reset', options);\r\n        yield put(forgetPasswordSuccess(response.message));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500:\r\n                message = 'Internal Server Error';\r\n                break;\r\n            case 401:\r\n                message = 'Invalid credentials';\r\n                break;\r\n            default:\r\n                message = error;\r\n        }\r\n        yield put(forgetPasswordFailed(message));\r\n    }\r\n}\r\n\r\nexport function* watchLoginUser(): any {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogoutUser(): any {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser(): any {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword(): any {\r\n    yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga(): any {\r\n    yield all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser), fork(watchForgetPassword)]);\r\n}\r\n\r\nexport default authSaga;\r\n"]},"metadata":{},"sourceType":"module"}