{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\songt\\\\PycharmProjects\\\\PV2EV_Dash\\\\src\\\\pages\\\\dashboards\\\\PV2EVDash1\\\\Basic.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col, Card, CardBody, Table } from 'reactstrap';\n\nvar StripedRowsTable = function StripedRowsTable(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      records = _useState2[0],\n      setRecord = _useState2[1];\n\n  useEffect(function () {\n    // POST request using fetch inside useEffect React hook\n    var requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        totalEVParked: props.totalEVParked\n      })\n    };\n    fetch('http://127.0.0.1:5000/table', requestOptions).then(function (response) {\n      // 서버 요청에 대한 응답받는 코드\n      response.json().then(function (data) {\n        console.log(data);\n        var Info = data; // type = Object로 들고온다.\n\n        setRecord(Info);\n        console.log(records);\n      });\n    });\n  }, []); // 계속 실행되어야할 것 같아서 []파라미터 안씀\n\n  return /*#__PURE__*/React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"header-title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }, \"\\uC8FC\\uCC28\\uB41C EV \\uC815\\uBCF4\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-muted font-14 mb-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Table, {\n    className: \"mb-0\",\n    striped: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, \"\\uB3C4\\uCC29\\uC2DC\\uAC04\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 29\n    }\n  }, \"\\uBC30\\uD130\\uB9AC \\uC6A9\\uB7C9\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 29\n    }\n  }, \"\\uCD08\\uAE30 \\uBC30\\uD130\\uB9AC \\uC6A9\\uB7C9\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 29\n    }\n  }, \"\\uB0A8\\uC740 \\uBC30\\uD130\\uB9AC \\uC6A9\\uB7C9\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }\n  }, \" 80%\\uAE4C\\uC9C0 \\uB0A8\\uC740 \\uCDA9\\uC804\\uC2DC\\uAC04(\\uBD84)\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 29\n    }\n  }, \"\\uCC28\\uC885\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }, records.map(function (record, index) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 37\n      }\n    }, Math.floor(record.arriveTime / 100), \"\\uC2DC \", record.arriveTime % 100, \"\\uBD84\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 37\n      }\n    }, record.capacity), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 37\n      }\n    }, record.currentCapacity), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }\n    }, record.remainderCapa), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 37\n      }\n    }, record.remainderTime), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 37\n      }\n    }, record.species, /*#__PURE__*/React.createElement(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      width: \"100px\",\n      src: record.species == '현대코나' ? require('./image/현대코나.png') : record.species == 'BMWi3' ? require('./image/BMWi3.png') : record.species == '기아니로' ? require('./image/기아니로.png') : record.species == '기아레이' ? require('./image/기아레이.png') : record.species == '기아봉고3' ? require('./image/기아봉고3.png') : record.species == '기아쏘울' ? require('./image/기아쏘울.png') : record.species == '닛산리프' ? require('./image/닛산리프.png') : record.species == '르노삼성SM3ZE' ? require('./image/르노삼성SM3ZE.png') : record.species == '쉐보레볼트' ? require('./image/쉐보레볼트.png') : record.species == '현대아이오닉5' ? require('./image/현대아이오닉5.png') : record.species == '현대포터' ? require('./image/현대포터.png') : record.species == '현대아이오닉' ? require('./image/현대아이오닉.png') : '',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 37\n      }\n    })));\n  })))));\n};\n\nvar Tables = function Tables(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xl: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StripedRowsTable, {\n    totalEVParked: props.totalEVParked,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default Tables;","map":{"version":3,"sources":["C:/Users/songt/PycharmProjects/PV2EV_Dash/src/pages/dashboards/PV2EVDash1/Basic.js"],"names":["React","useState","useEffect","Row","Col","Card","CardBody","Table","StripedRowsTable","props","records","setRecord","requestOptions","method","headers","body","JSON","stringify","totalEVParked","fetch","then","response","json","data","console","log","Info","map","record","index","Math","floor","arriveTime","capacity","currentCapacity","remainderCapa","remainderTime","species","require","Tables"],"mappings":"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","sourcesContent":["// @flow\r\nimport React, {useState,useEffect} from 'react';\r\nimport { Row, Col, Card, CardBody, Table } from 'reactstrap';\r\n\r\nconst StripedRowsTable = (props) => {\r\n\r\n    const [records,setRecord] = useState([])\r\n\r\n    useEffect(() => {\r\n        // POST request using fetch inside useEffect React hook\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ totalEVParked: props.totalEVParked})\r\n        };\r\n        fetch('http://127.0.0.1:5000/table', requestOptions)\r\n            .then((response) => { // 서버 요청에 대한 응답받는 코드\r\n                response.json().then(function(data) {\r\n                console.log(data);\r\n                const Info = data; // type = Object로 들고온다.\r\n                setRecord(Info)\r\n                console.log(records);\r\n            })\r\n        })\r\n    },[]); // 계속 실행되어야할 것 같아서 []파라미터 안씀\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h4 className=\"header-title\">주차된 EV 정보</h4>\r\n                <p className=\"text-muted font-14 mb-4\">\r\n                </p>\r\n\r\n                <Table className=\"mb-0\" striped>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>도착시간</th>\r\n                            <th>배터리 용량</th>\r\n                            <th>초기 배터리 용량</th>\r\n                            <th>남은 배터리 용량</th>\r\n                            <th> 80%까지 남은 충전시간(분)</th>\r\n                            <th>차종</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {records.map((record, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{Math.floor(record.arriveTime/100)}시 {record.arriveTime%100}분</td>\r\n                                    <td>{record.capacity}</td>\r\n                                    <td>{record.currentCapacity}</td>\r\n                                    <td>{record.remainderCapa}</td>\r\n                                    <td>{record.remainderTime}</td>\r\n                                    <td>{record.species}<br/>\r\n                                    <img width = \"100px\" src={ record.species == '현대코나' ? require('./image/현대코나.png') :\r\n                                    record.species == 'BMWi3' ? require('./image/BMWi3.png') :\r\n                                    record.species == '기아니로' ? require('./image/기아니로.png') :\r\n                                    record.species == '기아레이' ? require('./image/기아레이.png') :\r\n                                    record.species == '기아봉고3' ? require('./image/기아봉고3.png') :\r\n                                    record.species == '기아쏘울' ? require('./image/기아쏘울.png') :\r\n                                    record.species == '닛산리프' ? require('./image/닛산리프.png') :\r\n                                    record.species == '르노삼성SM3ZE' ? require('./image/르노삼성SM3ZE.png') :\r\n                                    record.species == '쉐보레볼트' ? require('./image/쉐보레볼트.png') :\r\n                                    record.species == '현대아이오닉5' ? require('./image/현대아이오닉5.png') :\r\n                                    record.species == '현대포터' ? require('./image/현대포터.png') :\r\n                                    record.species == '현대아이오닉' ? require('./image/현대아이오닉.png') :''} />\r\n                                    </td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </Table>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst Tables = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Row>\r\n                <Col xl={1}>\r\n                    <StripedRowsTable totalEVParked = {props.totalEVParked}/>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Tables;"]},"metadata":{},"sourceType":"module"}